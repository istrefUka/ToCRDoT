import { app, BrowserWindow, ipcMain } from 'electron';
import { Notification } from 'electron';
import { ProjectCommunication } from './communication';
import { AppendOnlyLog, LogEntry, Operation, uuid } from './append_only_log';
import { v4 as uuidv4 } from 'uuid';
import { mapReplacer } from './utils';
import * as fs from "fs";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const path_appData = app.getPath('userData');
const path_user = path_appData + '/user.txt';
const path_aol = path_appData + '/projects/project1/aol.json';
const a = new AppendOnlyLog(path_aol);
let personUUID = uuidv4();
const c = new ProjectCommunication(8080, undefined, "project1", "Project 1", a, (ops) => {return;});
c.init();

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  
  try {
    personUUID = fs.readFileSync(path_user).toString();
  } catch (error) {
    console.log("could not read user info, using generated userid");
    fs.writeFileSync(path_user, personUUID);
  }

  try {
    a.load();
  } catch (error) {
    console.log("could not load aol");
  }

  // Open the DevTools.
  //mainWindow.webContents.openDevTools();
};

function handleSubmitOperation(event: Electron.IpcMainEvent, operation: Operation, deps: uuid[]) {
  a.add_operation(personUUID, operation, deps, uuidv4());
  a.save();

  console.log(JSON.stringify(a, mapReplacer, 2));
}

function handleSendFrontier(event: Electron.IpcMainEvent) {
  c.sendFrontier();
  console.log("sent frontier");
}

function handleDeleteLocal(event: Electron.IpcMainEvent) {
  a.entryMap = new Map<uuid, LogEntry[]>();
  a.save();
  console.log("deleted local append-only log");
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(() => {
  ipcMain.on('submit-operation', handleSubmitOperation);
  ipcMain.on('send-frontier', handleSendFrontier);
  ipcMain.on('delete-local', handleDeleteLocal);
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
