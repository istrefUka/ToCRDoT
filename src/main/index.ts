import { app, BrowserWindow, ipcMain, WebContents } from 'electron';
import { loadProjectPreview, loadProjectPreviews, loadUser, saveUser, storeNewEmptyProject } from './file_utils';
import path from 'path'
import { v4 as uuidv4 } from 'uuid';
import { ProjectCommunication, ProjectListener } from './communication';
import { AppendOnlyLog, Operation, uuid } from './append_only_log';
import { Project } from './Project';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const app_path = app.getPath('userData');
const projects_path = path.join(app_path, 'projects');
console.log("projects path: " + projects_path);

const createWindow = (): Electron.WebContents => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  return mainWindow.webContents;
};

async function runApp(web: Electron.WebContents) {
  let userdata: User = undefined;
  try {
    userdata = loadUser(app_path);
  } catch (e) {
    web.send('switch-scene', 'scene-login')
    const username_p = new Promise<string>((resolve) => {
      ipcMain.on('login-submit', (_, username: string) => {
        resolve(username);
      });
    });
    userdata = { userID: uuidv4(), userName: await username_p };
    saveUser(app_path, userdata);
  }
  console.log('userdata:', userdata);
  let projects = loadProjectPreviews(projects_path);
  const ignored_projects = new Set(projects);
  console.log('projects:', projects);
  web.send('update-project-preview', projects);
  ipcMain.on('ignore-project', (_, projectPreview: ProjectPreview) => {
    ignored_projects.add(projectPreview);
  });
  ipcMain.on('add-project', (_, projectPreview: ProjectPreview) => {
    storeNewEmptyProject(projects_path, projectPreview);
    //projects.unshift(projectPreview);
    projects = loadProjectPreviews(projects_path);
    web.send('update-project-preview', projects);
    ignored_projects.add(projectPreview);
  });

  const pl = new ProjectListener(undefined, 8080);
  // more callbacks
  ipcMain.on('change-port', (_, port: number) => {
    console.log('changing port to:', port);
    pl.setPort(port);
  });
  ipcMain.on('change-ip-address', (_, ip: string) => {
    console.log('changing ip-address to:', ip);
    pl.setBroadcastIP(ip);
  });
  pl.init((preview, rinfo) => {
    console.log("received preview:", preview);
    if (![...ignored_projects].every((val) => val.projectID !== preview.projectID)) {
      return;
    }
    web.send('new-project-in-network', preview);
  });
  web.send('update-interface', pl.broadcast_ip, pl.port);
  // TODO: (if there is time) pl.onIfaceChange( (ip, port) => { web.send('update-interface', ip, port) } );
  web.send('switch-scene', 'scene-home');

  for (; ;) {
    const open_project_p = new Promise<uuid>((resolve) => {
      ipcMain.once('open-project', (_, projectID: uuid) => {
        ipcMain.removeAllListeners('new-project');
        resolve(projectID);
      });
      ipcMain.once('create-new-project', (_, projectTitle: string) => {
        const projectID = uuidv4();
        storeNewEmptyProject(projects_path, { projectID, projectTitle });
        initializeNewProject(userdata.userID, userdata.userName, path.join(projects_path, projectID));
        ipcMain.removeAllListeners('open-project');
        resolve(projectID);
      });
    });
    // wait for user to open a project
    const project_id = await open_project_p;
    pl.close();

    web.send('switch-scene', 'scene-project');
    await openProject(web, project_id, userdata.userID);
    projects = loadProjectPreviews(projects_path);
    web.send('update-project-preview', projects);
    web.send('switch-scene', 'scene-home');
    pl.open();
    web.send('update-interface', pl.broadcast_ip, pl.port);
  }
}

function initializeNewProject(owner: uuid, ownerName: string, project_path: string) {
  //TODO @istref: hie müesst me ds projekt initialisiere und persistänt spichere.
  // me cha devo usgah ds de projekt-ordner existiert und de projekt-titel scho gspicheret worde isch. 
  return;
}

async function openProject(web: WebContents, projectID: uuid, userID: uuid) {
  const a = new AppendOnlyLog(path.join(projects_path, projectID, "aol.json"));
  const projectPreview = loadProjectPreview(projects_path, projectID);
  try {
    a.load();
  } catch (e) {
    console.log('append-only log for project ' + projectID + ' doesnt exist yet');
  }
  const p = new Project(projectID, projectPreview.projectTitle, a, projects_path);
  p.charge();
  const pc = new ProjectCommunication(8080, undefined, projectID, projectPreview.projectTitle, a, (ops: Operation[]) => {
    p.update(ops);
  });

  // Beispiel 2: operation vom GUI empfangen
  ipcMain.on('change-project-task-state', (_, taskID: uuid, newState: string) => {
    console.log('changing state of task', taskID, 'to', newState);
    // p.setTaskStateGUI(userID, taskID, newState);

    // Beispiel 3: zustand an das GUI schicken. 
    //web.send('update-project-view', p.getView());
  });
  
  await new Promise<void>((resolve) => {
    // Beispiel 1: index.ts <- renderer.ts
    ipcMain.once('leave-project', () => {resolve()})
  });

  pc.close();

  // Cleanup von Beispiel 2
  ipcMain.removeAllListeners('change-project-task-state')
  return;
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then(async () => {
  const web = createWindow();
  runApp(web);
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
