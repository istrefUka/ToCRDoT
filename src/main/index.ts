import { app, BrowserWindow, ipcMain } from 'electron';
import { loadProjectPreviews, loadUser, saveUser } from './file_utils';
import path from 'path'
import {v4 as uuidv4} from 'uuid';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const app_path = app.getPath('userData');
const projects_path = path.join(app_path, 'projects');
console.log("projects path: " + projects_path);

const createWindow = (): Electron.WebContents => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
  return mainWindow.webContents;
};

async function runApp(web: Electron.WebContents) {
  let userdata: User = undefined;
  try {
    userdata = loadUser(app_path);
  } catch (e) {
    web.send('switch-scene', 'scene-login')
    const username_p = new Promise<string>((resolve) => {
      ipcMain.on('login-submit', (_, username: string) => {
        resolve(username);
      });
    });
    userdata = {userID: uuidv4(), userName: await username_p};
    saveUser(app_path, userdata);
  }
  console.log('userdata:', userdata);
  const projects = loadProjectPreviews(projects_path);
  console.log('projects:', projects);
  web.send('update-project-preview', projects);
  // todo initialize home scene

  web.send('switch-scene', 'scene-home');
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.whenReady().then( async () => {
  const web = createWindow();
  runApp(web);
})

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
